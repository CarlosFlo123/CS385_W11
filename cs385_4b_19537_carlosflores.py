# -*- coding: utf-8 -*-
"""CS385_4b_19537_CarlosFlores.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kbcTqXMmD1k6_28Oun3QU-LZw1cHG9Dn
"""

import calendar
cal = calendar.TextCalendar(firstweekday=3)
cal.pryear(2012, c=1)

import calendar
cal = calendar.TextCalendar(firstweekday=6)
print(cal.formatmonth(2020, 1))

import calendar
for year in range(2011, 2021):
  print("Is " + str(year) + " leap?: " + str(calendar.isleap(year)))

#y=ax+b
class Point:
  def __init__(self, x, y):
    self.x = x
    self.y = y
  def get_line_to(self, point):
    a = round((point.y - self.y) / (point.x - self.x))
    b = self.y - a*self.x
    return a, b
print(Point(4, 11).get_line_to(Point(6, 15)))

'''11.3.11.1. Write a Boolean function between that takes two MyTime objects, t1 and t2, 
as arguments, and returns True if the invoking object falls between the two 
times. Assume t1 <= t2, and make the test closed at the lower bound and open at
 the upper bound, i.e. return True if t1 <= obj < t2.'''

class MyTime:
  def __init__(self, h, m):
    self.hours = h
    self.minutes = m
  def __lt__(self, t):
    if (self.hours == t.hours and self.minutes < t.minutes) or self.hours < t.hours:
      return True
    return False
  def between(self, t1, t2):
    if self < t2 and t1 < self:
      return True
    return False
t1 = MyTime(15, 42)
t2 = MyTime(18, 50)
t3 = MyTime(20, 12)
t2.between(t1, t3) #True
#t3.between(t2, t1) #False

#11.3.11#2. Turn the above function into a method in the MyTime class

11.5.9
class OldMaidGame(CardGame): 
   def __init__(self): 3 self.deck = Deck() 4 self.deck.shuffle()
   def remove_matches(self): 3 count = 0 4 original_cards = self.cards[:] 5 for card in original_cards: 6 match = Card(3 - card.suit, card.rank) 7 if match in self.cards: 8 self.cards.remove(card) 9 self.cards.remove(match) 10 print("Hand {0}: {1} matches {2}" 11 .format(self.name, card, match)) 12 count += 1 13 return count
  def play(self, names): 
   # Remove Queen of Clubs 4 self.deck.remove(Card(0,12)
   # Make a hand for each player 7 self.hands = [] 8 for name in names: 9 self.hands.append(OldMaidHand(name))
10 11 # Deal the cards 12 self.deck.deal(self.hands) 13 print("---------- Cards have been dealt") 14 self.print_hands()
15 16 # Remove initial matches 17 matches = self.remove_all_matches() 18 print("---------- Matches discarded, play begins") 19 self.print_hands()
20 21 # Play until all 50 cards are matched 22 turn = 0 23 num_hands = len(self.hands) 24 while matches < 25: 25 matches += self.play_one_turn(turn) 26 turn = (turn + 1) % num_hands
27 28 print("---------- Game is Over") 29 self.print_hands()
def remove_all_matches(self): 4 count = 0 5 for hand in self.hands: 6 count += hand.remove_matches() 7 return count
def play_one_turn(self, i): 4 if self.hands[i].is_empty(): 5 return 0 6 neighbor = self.find_neighbor(i) 7 picked_card = self.hands[neighbor].pop() 8 self.hands[i].add(picked_card)
print("Hand", self.hands[i].name, "picked", picked_card) 10 count = self.hands[i].remove_matches() 11 self.hands[i].shuffle() 12 return count
def find_neighbor(self, i): 4 num_hands = len(self.hands) 5 for next in range(1,num_hands): 6 neighbor = (i + next) % num_hands 7 if not self.hands[neighbor].is_empty(): 8 return neighbor


#import cards >>> game = cards.OldMaidGame() >>> game.play(["Allen","Jeff","Chris"])

Add a method, print_hands, to the OldMaidGame class which traverses self.hands and prints each hand.